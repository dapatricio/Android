/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conexion;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel Pe√±arreta
 * Cristian Mendoza
 * Jairo Valle
 * 
 * Fecha: 21/07/2016
 */

public class finalfantastic extends javax.swing.JFrame {

    /**
     * Creates new form finalfantastic
     */
    public finalfantastic(){
        getContentPane().setBackground(new java.awt.Color(255,255,255));
        initComponents();
        btnRDF.setEnabled(false);
        jLabel4.setVisible(false);
        comboMysql.setVisible(false);
        btnCon.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CBoxTablas = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaBD = new javax.swing.JTable();
        btnTransf = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAlias = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPrefijo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTipoRecurso = new javax.swing.JTextField();
        btnRDF = new javax.swing.JButton();
        comboDB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnDB = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        comboMysql = new javax.swing.JComboBox<>();
        btnCon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        CBoxTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBoxTablasActionPerformed(evt);
            }
        });

        tablaBD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaBD.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tablaBD);

        btnTransf.setText("Transformar");
        btnTransf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransfActionPerformed(evt);
            }
        });

        tblAlias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblAlias);

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel1.setText("Prefijo");

        jLabel2.setText("Tipo Recurso");

        btnRDF.setText("Mostrar RDF");
        btnRDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRDFActionPerformed(evt);
            }
        });

        comboDB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oracle", "Postgres", "MySQL" }));
        comboDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDBActionPerformed(evt);
            }
        });

        jLabel3.setText("Seleccione el motor de base de datos para conectarse:");

        btnDB.setText("Conectar");
        btnDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDBActionPerformed(evt);
            }
        });

        jLabel4.setText("Seleccione la base de datos para conectarse");

        btnCon.setText("Conectar");
        btnCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(339, 339, 339)
                                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnTransf))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(CBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboDB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboMysql, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnCon)
                                    .addComponent(btnDB))))
                        .addGap(70, 70, 70)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(btnRDF)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnGuardar)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrefijo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTipoRecurso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btnDB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPrefijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(comboMysql, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCon))
                        .addGap(18, 18, 18)
                        .addComponent(CBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTipoRecurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTransf)
                    .addComponent(btnGuardar)
                    .addComponent(btnVolver)
                    .addComponent(btnRDF))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBoxTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBoxTablasActionPerformed
        DefaultTableModel modeloTabla = new DefaultTableModel();
        if((comboDB.getSelectedItem()) == ("Oracle")){
            String tabla = (String) CBoxTablas.getSelectedItem();
            int i = 0;
            String[] columnas;
                try {
                    ConexionBD con = new ConexionBD();
                    con.conectar();
                    Statement st = con.getConexion().createStatement();
                    ResultSet rs = st.executeQuery("Select * from " + tabla);
                    ResultSetMetaData rm = rs.getMetaData();

                    DefaultTableModel modelo = new DefaultTableModel();
                    //Recupera los campos de la tabla
                    int nroColumnas = rm.getColumnCount();
                    Object columns[] = new Object[nroColumnas];
                    for (int j = 1; j <= nroColumnas; j++) {
                        Object columnName = rm.getColumnName(j);
                        columns[j - 1] = columnName;
                        modeloTabla.addColumn(columns[j - 1]);
                        System.out.println(columns[j - 1]);
                    }
                    Object[] fila = new Object[columns.length];
                    while (rs.next()) {
                        for (int o = 0; o < columns.length; o++) {
                            fila[o] = rs.getString(String.valueOf(columns[o]));
                            System.out.println(fila[o]);
                        }
                        modeloTabla.addRow(fila);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("no sirve");
                }
                tablaBD.setModel(modeloTabla);

                for (i = 0; i < tablaBD.getColumnCount(); i++) {
                    tablaBD.getColumnModel().getColumn(i).setMinWidth(110);
                }
        }else if((comboDB.getSelectedItem()) == ("Postgres")){
            String tabla = (String) CBoxTablas.getSelectedItem();
            int i = 0;
            String[] columnas;
                try {
                    ConexionBD con = new ConexionBD();
                    con.conectarPost2();
                    Statement st = con.getConexion().createStatement();
                    ResultSet rs = st.executeQuery("Select * from " + tabla);
                    ResultSetMetaData rm = rs.getMetaData();

                    DefaultTableModel modelo = new DefaultTableModel();
                    //Recupera los campos de la tabla
                    int nroColumnas = rm.getColumnCount();
                    Object columns[] = new Object[nroColumnas];
                    for (int j = 1; j <= nroColumnas; j++) {
                        Object columnName = rm.getColumnName(j);
                        columns[j - 1] = columnName;
                        modeloTabla.addColumn(columns[j - 1]);
                        System.out.println(columns[j - 1]);
                    }
                    Object[] fila = new Object[columns.length];
                    while (rs.next()) {
                        for (int o = 0; o < columns.length; o++) {
                            fila[o] = rs.getString(String.valueOf(columns[o]));
                            System.out.println(fila[o]);
                        }
                        modeloTabla.addRow(fila);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("no sirve");
                } catch (ClassNotFoundException ex) {
                Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            }
                tablaBD.setModel(modeloTabla);

                for (i = 0; i < tablaBD.getColumnCount(); i++) {
                    tablaBD.getColumnModel().getColumn(i).setMinWidth(110);
                }
        }else if((comboDB.getSelectedItem()) == ("MySQL")){
            String tabla = (String) CBoxTablas.getSelectedItem();
            int i = 0;
            String[] columnas;
                try {
                    ConexionBD con = new ConexionBD();
                    con.conectarMysql2();
                    Statement st = con.getConexion().createStatement();
                    ResultSet rs = st.executeQuery("Select * from " + tabla);
                    ResultSetMetaData rm = rs.getMetaData();

                    DefaultTableModel modelo = new DefaultTableModel();
                    //Recupera los campos de la tabla
                    int nroColumnas = rm.getColumnCount();
                    Object columns[] = new Object[nroColumnas];
                    for (int j = 1; j <= nroColumnas; j++) {
                        Object columnName = rm.getColumnName(j);
                        columns[j - 1] = columnName;
                        modeloTabla.addColumn(columns[j - 1]);
                        System.out.println(columns[j - 1]);
                    }
                    Object[] fila = new Object[columns.length];
                    while (rs.next()) {
                        for (int o = 0; o < columns.length; o++) {
                            fila[o] = rs.getString(String.valueOf(columns[o]));
                            System.out.println(fila[o]);
                        }
                        modeloTabla.addRow(fila);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("no sirve");
                }
                tablaBD.setModel(modeloTabla);

                for (i = 0; i < tablaBD.getColumnCount(); i++) {
                    tablaBD.getColumnModel().getColumn(i).setMinWidth(110);
                }
        }
    }//GEN-LAST:event_CBoxTablasActionPerformed

    private void btnTransfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransfActionPerformed
        // TODO add your handling code here:

        CBoxTablas.setEnabled(false);
        tablaBD.setEnabled(false);
        btnGuardar.setEnabled(true);
        btnVolver.setEnabled(true);
        tblAlias.setEnabled(true);
        btnTransf.setEnabled(false);
        txtPrefijo.setEnabled(true);
        txtTipoRecurso.setEnabled(true);

        DefaultTableModel modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("COLUMNA");
        modeloTabla.addColumn("ALIAS");
        
        if((comboDB.getSelectedItem()) == ("Oracle")){
            try {
                Object[] fila = new Object[2];
                ConexionBD con = new ConexionBD();
                con.conectar();
                Statement st = con.getConexion().createStatement();
                ResultSet rs = st.executeQuery("select * from " + CBoxTablas.getSelectedItem());
                ResultSetMetaData rm = rs.getMetaData();
                int nroColumnas = rm.getColumnCount();
                for (int j = 1; j <= nroColumnas; j++) {
                    fila[0] = rm.getColumnName(j);
                    fila[1] = fila[0];
                    modeloTabla.addRow(fila);
                }
                tblAlias.setModel(modeloTabla);
            } catch (SQLException ex) {
                Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if((comboDB.getSelectedItem()) == ("Postgres")){
            try {
                Object[] fila = new Object[2];
                ConexionBD con = new ConexionBD();
                con.conectarPost2();
                Statement st = con.getConexion().createStatement();
                ResultSet rs = st.executeQuery("select * from " + CBoxTablas.getSelectedItem());
                ResultSetMetaData rm = rs.getMetaData();
                int nroColumnas = rm.getColumnCount();
                for (int j = 1; j <= nroColumnas; j++) {
                    fila[0] = rm.getColumnName(j);
                    fila[1] = fila[0];
                    modeloTabla.addRow(fila);
                }
                tblAlias.setModel(modeloTabla);
            } catch (SQLException ex) {
                Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if((comboDB.getSelectedItem()) == ("MySQL")){
            try {
                Object[] fila = new Object[2];
                ConexionBD con = new ConexionBD();
                con.conectarMysql2();
                Statement st = con.getConexion().createStatement();
                ResultSet rs = st.executeQuery("select * from " + CBoxTablas.getSelectedItem());
                ResultSetMetaData rm = rs.getMetaData();
                int nroColumnas = rm.getColumnCount();
                for (int j = 1; j <= nroColumnas; j++) {
                    fila[0] = rm.getColumnName(j);
                    fila[1] = fila[0];
                    modeloTabla.addRow(fila);
                }
                tblAlias.setModel(modeloTabla);
            } catch (SQLException ex) {
                Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
    }//GEN-LAST:event_btnTransfActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        btnRDF.setEnabled(true);
        ConexionBD con = new ConexionBD();
        con.conectarTripletas();
        Statement st;
        try {
            st = con.getConexion().createStatement();
            ResultSet rs = st.executeQuery("DELETE RDF");
        } catch (SQLException ex) {
            Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        DefaultTableModel modeloTabla = new DefaultTableModel();
        tblAlias.setModel(modeloTabla);
        txtPrefijo.setText("");
        txtTipoRecurso.setText("");
        CBoxTablas.setEnabled(true);
        tablaBD.setEnabled(true);
        btnTransf.setEnabled(true);
        btnRDF.setEnabled(false);
        txtPrefijo.setEnabled(false);
        txtTipoRecurso.setEnabled(false);
        btnRDF.setEnabled(false);
        btnVolver.setEnabled(false);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        int filas = tablaBD.getModel().getRowCount();
        int campos = tablaBD.getModel().getColumnCount();
        int columnas = tblAlias.getModel().getRowCount();
        btnRDF.setEnabled(true);
        
        String sujeto = "", objeto = "", predicado = "";

        String[] predicados = new String[columnas];
        //se obtine los predicados(alias)
        for (int i = 0; i < predicados.length; i++) {
            predicados[i] = (String) tblAlias.getValueAt(i, 1);
        }

        if (!"".equals(txtPrefijo.getText())) {
            if (!"".equals(txtTipoRecurso.getText())) {
                try {
                    for (int i = 0; i < filas; i++) {
                        ConexionBD con = new ConexionBD();
                        con.conectarTripletas();
                        Statement st = con.getConexion().createStatement();
                        sujeto = txtPrefijo.getText() + " " + txtTipoRecurso.getText() + " " + tablaBD.getValueAt(i, 0);
                        try {
                            /*st.executeUpdate("insert into RDF values ('" + txtTipoRecurso.getText()
                                    + "','" + txtPrefijo.getText() + txtTipoRecurso.getText() + "','" + sujeto + "')");*/
                            for (int j = 0; j < campos; j++) {
                                predicado = predicados[j];
                                objeto = (String) tablaBD.getValueAt(i, j);
                                //con.conectar();
                                ResultSet rs = st.executeQuery("insert into RDF values ('" + sujeto + "','" + predicado + "','" + objeto + "')");
                                btnGuardar.setEnabled(false);
                            }

                        } catch (java.sql.SQLIntegrityConstraintViolationException ex) {
                            System.out.println("ya esta almacenado");
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, "Correcto!!");
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe ingresar un Tipo de recurso");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe ingresar un Prefijo");
        }
        //tripletas();

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnRDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRDFActionPerformed
        // TODO add your handling code here:

        frmRDF rdf = new frmRDF();
        rdf.setVisible(true);

    }//GEN-LAST:event_btnRDFActionPerformed

    private void btnDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBActionPerformed
        ConexionBD con = new ConexionBD();
        try{
            listaTablasCombo();
            con.conectarTripletas();
            Statement st = con.getConexion().createStatement();
            ResultSet rs = st.executeQuery("DELETE RDF");
            
        } catch (SQLException ex) {
            Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnDBActionPerformed

    private void comboDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDBActionPerformed

    private void btnConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConActionPerformed
        Connection conexion = null;
        String db = (String) comboMysql.getSelectedItem(); //
        if((comboDB.getSelectedItem()) == ("Postgres")){
            try{
                String url=("jdbc:postgresql://localhost:5432/"+db);
                conexion=DriverManager.getConnection(url,"postgres","primos14");
                Statement st = conexion.createStatement(); //SELECT TABLESPACE_NAME FROM USER_TABLESPACES
                ResultSet rs = st.executeQuery("SELECT tablename FROM pg_tables");
                tablaBD.removeAll();
                while (rs.next()) {
                    CBoxTablas.addItem(rs.getString(1));
                }
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if((comboDB.getSelectedItem()) == ("MySQL")){
            try{
                conexion = DriverManager.getConnection("jdbc:mysql://127.0.0.1/"+db, "root", "primos14");
                Statement st = conexion.createStatement(); //SELECT TABLESPACE_NAME FROM USER_TABLESPACES
                ResultSet rs = st.executeQuery("show tables;");
                tablaBD.removeAll();
                while (rs.next()) {
                    CBoxTablas.addItem(rs.getString(1));
                }
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnConActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(finalfantastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(finalfantastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(finalfantastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(finalfantastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new finalfantastic().setVisible(true);
            }
        });
    }

    public void listaTablasCombo() throws SQLException, ClassNotFoundException {
        System.out.println("area de texto--> ");

        txtPrefijo.setEnabled(false);
        txtTipoRecurso.setEnabled(false);
        btnGuardar.setEnabled(false);
        btnVolver.setEnabled(false);

        
            ConexionBD con = new ConexionBD();
            //conexion oracle
            if((comboDB.getSelectedItem()) == ("Oracle")){
                try {
                    con.conectar();  
                    Statement st = con.getConexion().createStatement(); //SELECT TABLESPACE_NAME FROM USER_TABLESPACES
                    ResultSet rs = st.executeQuery("select TABLE_NAME from USER_TABLES");
                while (rs.next()) {
                    CBoxTablas.addItem(rs.getString("TABLE_NAME").toUpperCase()); //TABLE_NAME    funciona
                }
                this.pack();
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
                }
            //conexion post    
            }else if(comboDB.getSelectedIndex() == 1){
                con.conectarPost();
                Statement st = con.getConexion().createStatement(); //SELECT TABLESPACE_NAME FROM USER_TABLESPACES
                ResultSet rs = st.executeQuery("SELECT datname FROM pg_database "); // SELECT tablename FROM pg_tables
                jLabel4.setVisible(true);
                comboMysql.setVisible(true);
                btnCon.setVisible(true);
            while (rs.next()) {
                comboMysql.addItem(rs.getString(1));
            }
            //conexion mysql    
            }else if(comboDB.getSelectedItem().equals("MySQL")){
                try {
                    con.conectarMysql();
                    Statement st = con.getConexion().createStatement(); //SELECT TABLESPACE_NAME FROM USER_TABLESPACES
                    ResultSet rs = st.executeQuery("show databases;");
                    jLabel4.setVisible(true);
                    comboMysql.setVisible(true);
                    btnCon.setVisible(true);
                    tablaBD.removeAll();
                while (rs.next()) {
                    comboMysql.addItem(rs.getString(1));
                }
                } catch (SQLException ex) {
                    Logger.getLogger(finalfantastic.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CBoxTablas;
    private javax.swing.JButton btnCon;
    private javax.swing.JButton btnDB;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnRDF;
    private javax.swing.JButton btnTransf;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> comboDB;
    public static javax.swing.JComboBox<String> comboMysql;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaBD;
    private javax.swing.JTable tblAlias;
    private javax.swing.JTextField txtPrefijo;
    private javax.swing.JTextField txtTipoRecurso;
    // End of variables declaration//GEN-END:variables
}
